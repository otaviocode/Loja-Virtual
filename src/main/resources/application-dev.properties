# Configuração do Banco de Dados
# URL de conexão com o PostgreSQL, rodando localmente na porta 5432, com reconexão automática em caso de falha
spring.datasource.url=jdbc:postgresql://localhost:5432/loja_virtual_mentoria?autoreconnect=true

# Usuário do banco de dados
spring.datasource.username=postgres

# Senha do banco de dados
spring.datasource.password=admin

# Classe do driver JDBC do PostgreSQL
spring.datasource.driver-class-name=org.postgresql.Driver

# Configuração do Hibernate e JPA
# O Hibernate atualizará automaticamente a estrutura do banco conforme as entidades do código
spring.jpa.hibernate.ddl-auto=update

# Especifica que o banco utilizado é PostgreSQL
spring.datasource.platform=postgres


# Permite que o Hibernate use metadados do JDBC
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = true

# Define o dialect do PostgreSQL versão 9 para otimização de queries
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect

# Joguei o projeto para a porta 8085
server.port=8081

# Define o dialect genérico do PostgreSQL para o Hibernate
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# Configuração do Contexto do Servidor
# Define o caminho base da aplicação na URL (ex: http://localhost:8080/loja_virtual_mentoria)
server.servlet.context-path=/loja_virtual_mentoria

# Configuração de Upload de Arquivos
# Define o tamanho máximo permitido para um arquivo individual (10MB)
spring.servlet.multipart.max-file-size=10000KB

# Define o tamanho máximo permitido para uma requisição inteira (10MB)
spring.servlet.multipart.max-request-size=10000KB

# Habilita o suporte para upload de arquivos
spring.servlet.multipart.enabled=true

# Configuração de Compressão de Respostas HTTP
# Ativa a compressão de respostas HTTP para melhorar a performance
server.compression.enabled=true

# Define os tipos de mídia que serão comprimidos
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json

# Apenas respostas acima de 1KB serão comprimidas
server.compression.min-response-size=1024

# Habilita suporte ao protocolo HTTP/2 para melhor desempenho
server.http2.enabled=true

# Configuração de Encoding (Codificação)
# Define a codificação de caracteres como UTF-8
spring.http.encoding.charset=UTF-8

# Ativa a codificação de caracteres
spring.http.encoding.enabled=true

# Força o uso de UTF-8 em todas as requisições e respostas
spring.http.encoding.force=true

# Força que todas as requisições recebidas usem UTF-8
spring.http.encoding.force-request=true

# Força que todas as respostas enviadas usem UTF-8
spring.http.encoding.force-response=true

# Configuração do HikariCP (Gerenciador de Conexões)
# Define o uso do HikariCP como pool de conexões
spring.datasource.type=com.zaxxer.hikari.HikariDataSource

# Tempo máximo (em ms) que uma conexão pode esperar antes do timeout (20s)
spring.datasource.hikari.connection-timeout=20000

# Número mínimo de conexões inativas mantidas no pool
#-----------------------------------------------------------------------------------TESTS: 
# I'm going to insert the value 10 just for testing, if it gives an error CHANGE IT!!!!!!!!!!!!!!!!!!
spring.datasource.hikari.minimum-idle=10

# If it giver an error delete this line!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# spring.datasource.hikari.metricsTrackerFactory=com.zaxxer.hikari.metrics.micrometer.MicrometerMetricsTrackerFactory


# Número máximo de conexões simultâneas no pool
# -----------------------------------------------------------------------------------------------
# Before it was 550, I will enter 50, if it gives an error I'll change it. 
spring.datasource.hikari.maximum-pool-size=50

# Show error logs and how many connections there are in the system.
# spring.datasource.hikari.metricsTrackerFactory=com.zaxxer.hikari.metrics.micrometer.MicrometerMetricsTrackerFactory


# Tempo máximo (em ms) que uma conexão pode ficar inativa antes de ser fechada (10s)
# Tests : I'll insert a value of 60000 Just for tests !!! If it given a erros I'll change for 10000
spring.datasource.hikari.idle-timeout=60000

# Nome do pool de conexões
spring.datasource.hikari.pool-name=PoolHikari

# Configuração de Statements Preparados
# Habilita o uso de prepared statements para melhor performance
spring.datasource.dbcp2.pool-prepared-statements=true

# Número máximo de prepared statements abertos simultaneamente
spring.datasource.dbcp2.max-open-prepared-statements=550

# Configuração de Transações
# Desativa o auto-commit para que transações sejam controladas manualmente
spring.datasource.hikari.auto-commit=false

# Garante rollback automático em caso de falha ao fazer commit
spring.transaction.rollback-on-commit-failure=true

# Configuração do Hibernate para Performance
# Define o número máximo de operações agrupadas em uma query
spring.jpa.properties.hibernate.jdbc.batch_size=4

# Faz com que o Hibernate otimize a ordem dos inserts
spring.jpa.properties.hibernate.order_inserts=true

# Faz com que o Hibernate otimize a ordem dos updates
spring.jpa.properties.hibernate.order_updates=true

# Configuração do Servidor Tomcat
# Número máximo de conexões simultâneas permitidas pelo Tomcat
server.tomcat.max-connections=50000

# Número mínimo de threads disponíveis para processar requisições
server.tomcat.min-spare-threads=1000

# Configuração da Sessão
# Executa a limpeza de sessões expiradas diariamente às 4h da manhã
spring.session.jdbc.cleanup-cron = 0 0 4 * * *

# Configuração de Arquivos Estáticos
# Define o caminho onde os arquivos estáticos da aplicação serão servidos
spring.mvc.static-path-pattern=/resoures/static/**

# configurarion of the flyway: 
spring.flyway.enable = true
spring.flyway.baseline-on-migrate = true
spring.flyway.locations = classpath:db/migration
spring.flyway.check-location = true
spring.flyway.baseline-version = 1
spring.flyway.sql-migration-prefix = V 
spring.flyway.sql-migration-separator = __ 
spring.flyway.sql-migration-suffixes = .sql



